{"version":3,"sources":["components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["List","props","react_default","a","createElement","items","map","item","key","className","completed","task","onClick","markCompleted","id","removeTask","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnChange","e","value","target","setState","handleOnSubmit","preventDefault","concat","toConsumableArray","state","uuid","complete","find","index","findIndex","obj","data","filteredTasks","filter","onSubmit","onChange","TodoList_List","Component","App","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea91fca0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nconst List = props => (\n    <ul>\n        {props.items.map((item, key) => (\n            <li\n                key=\"item.key\"\n                className={item.completed ? \"completed\" : \"pending\"}\n            >\n                {item.task}\n\n                <div className=\"actions\">\n                    <span\n                        className={item.completed ? \"hide\" : \"done\"}\n                        onClick={() => props.markCompleted(item.id)}\n                    >\n                        <i className=\"fa fa-check\" />\n                    </span>\n                    <span\n                        className=\"trash\"\n                        onClick={() => props.removeTask(item.id)}\n                    >\n                        <i className=\"fa fa-trash\" />\n                    </span>\n                </div>\n            </li>\n        ))}\n    </ul>\n);\n\nclass TodoList extends Component {\n    constructor() {\n        super();\n\n        // Initial state...\n        this.state = {\n            task: \"\",\n            items: []\n        };\n    }\n\n    componentWillMount() {\n        // Setting default tasks...\n        this.setState({\n            items: [\n                {\n                    id: uuid(),\n                    task: \"Default Task 1\",\n                    completed: false\n                },\n                {\n                    id: uuid(),\n                    task: \"Default Task 2\",\n                    completed: true\n                },\n                {\n                    id: uuid(),\n                    task: \"Default Task 3\",\n                    completed: false\n                }\n            ]\n        });\n    }\n\n    handleOnChange = e => {\n        const {\n            target: { value }\n        } = e;\n\n        // Updating our task state with the input value...\n        this.setState({\n            task: value\n        });\n    };\n\n    handleOnSubmit = e => {\n        // Prevent default to avoid the actual form submit...\n        e.preventDefault();\n\n        // Once is submited we reset the task value and we push the new task to the items array.\n        this.setState({\n            task: \"\",\n            items: [\n                ...this.state.items,\n                {\n                    id: uuid(),\n                    task: this.state.task,\n                    complete: false\n                }\n            ]\n        });\n    };\n\n    markCompleted = id => {\n        // Finding the task by id...\n        const foundTask = this.state.items.find(task => task.id === id);\n\n        // Updating the completed status...\n        // let data = this.state.items;\n        let index = this.state.items.findIndex(obj => obj.id === id);\n        let data = this.state.items;\n        data[index].completed = true;\n\n        // Updating the state with the new updated task...\n        this.setState({\n            items: data\n        });\n    };\n\n    removeTask = id => {\n        // Filtering the tasks by removing the specific task id...\n        const filteredTasks = this.state.items.filter(task => task.id !== id);\n\n        // Updating items state...\n        this.setState({\n            items: filteredTasks\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"Todo\">\n                <h1>New Task:</h1>\n\n                <form onSubmit={this.handleOnSubmit}>\n                    <input\n                        value={this.state.task}\n                        onChange={this.handleOnChange}\n                    />\n                </form>\n\n                <List\n                    items={this.state.items}\n                    markCompleted={this.markCompleted}\n                    removeTask={this.removeTask}\n                />\n            </div>\n        );\n    }\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}